So let's say you have a nice GWT app that uses GSS. You did this like a smart developer by using a theme file to easily manage your variables. This made your coding go faster and gave all of your screens the same look. Now it's time to use GWT Theo to make things run on their own. GWT Theo is my take on the powerful Theo set of Gulp plugins that make it easy to create themes automatically. It has been cut down a lot and changed to fit the specific needs of GWT. It will make your Java classes for each set of variables (fonts, colors, sizes) and your unique theme file, which will bring all of these things together. It will also make a style guide for you based on the variables you choose. Last but not least, it will make it easier to add custom icons (currently only supporting icon sets from Icomoon). There is a working project in a repository on Github, and there is a live application right here. Check out the style guide, and you'll fall in love with it. This post on a blog will show you how to use GWT Theo. Getting your project to use GWT Theo Let's start by copying the GWT Theo repository at the root of your application (at the same level of your src repository). git clone Then, you'll need to change the gulpfile.js to match the paths of your app. On Arcbees' website, it would look like this: Visit Gist to see the code. Once it's done, you can try it out by running gulp in the GWT Theo folder in your terminal. Your computer will need to have Gulp installed. Your gulpfile.js should tell your computer to create default files in the folders you tell it to. This is what the Colors.java file looks like by default: Visit Gist to see the code. Using the theme file that was made Once your GSS files have been made, you can connect the theme to them. All you have to do is find a GSS file that you want to make work better with your theme by letting you use custom variables in it and adding the theme.gss to its source. My style.gss file's source declaration is in my AppResources.java file. Just make sure that your GSS file requires the theme, and that's it. All of your variables can now be used: Visit Gist to see the code. Custom variables By default, the theme-properties folder in GWT Theo has three files for variables: colors, fonts, and sizes. You can, of course, add more or take away anything you don't need. In a JSON file, variables are declared in a structure that looks like this: Visit Gist to see the code. global (object): This set of variables' type definition (string): The type of a variable (this will influence the layout of the style guide) color [option for type]: This is used for colors. size [option for type]: Used for string variables category [string]: Defines the category and makes a section in the style guide classname [string]: The name of the class for the file that will be made from these variables. title:?: This set of variables is called props. Your variables' definitions are as follows: title-* [object, if any]: In the style guide, everything that starts with "title-" will be turned into a title. Must be unique ("title-foo", "title-bar"). Your title [string] * [object]: Your variable's name value [string]: The value of the variable that has been set comment (string, not required): For the size type variable, a note about that variable: Explain what your variables are. Adding or taking away a group of variables The theme.json file is used to load files with variables. From here, you can remove a set or add a new one. Custom icons GWT can make it hard to use custom icons in your app, which is a shame because it's fun. To make it work, you have to declare a lot of things. GWT Theo can help you do that, but there is only one way to do it right now. Making everything happen Choose from the icons on Icomoon. You can use pre-made icons from Icomoon's many icon packs, or you can make your own by uploading svg files. Once you have made your choices, generate your font (bottom right). Open the Preferences (top left) before you download the package, and: Change the name of the font to "icons." Change the prefix of the class to "icon_" Get the whole package. Get it out. Make a folder called "theme-files" inside your GWT Theo folder and put your "icons" folder inside it. Now, come in.