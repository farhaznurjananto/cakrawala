Introducing Lambda Prover: A Tool for Term Reduction and Equation Proofs

Lambda calculus, a mathematical framework used for expressing functional programming, is a fundamental part of computer science. Despite its importance, there was a void when it came to a specialized tool that could prove equality in the untyped version of lambda calculus through term reduction. Hoping to fill that need, a skilled programmer developed Lambda Prover.

The developer's initial motivation for creating this tool was to be able to prove the Monad or Applicative laws for various types. While some of these proofs require induction, many involve simple reductions and equational reasoning. The developer also wanted a tool to specifically work in the untyped lambda calculus just to prove a point. Additionally, the developer was interested in how this tool could be utilized in a typed theory, such as System F as an approximation for Haskell. Fortunately, the subject reduction property guarantees that the results proven in ULC will hold in System F just as well.

While algebraic datatypes posed a more complex challenge, the developer added data declarations and case expressions to the prover and desugared them via the Church encoding, like they did with Maybe by hand. Furthermore, the developer intended to experiment with some pieces of Haskell tech that they didn't use in their day-to-day work and evaluate their effectiveness. Those who are interested in taking a closer look at the code will find it relatively easy to navigate, and there may be some interesting bits to uncover.

Lambda Prover has a demo feature that allows users to see it in action proving the right identity monad law for the reader monad through a specific invocation process. The file containing the definitions is included in the repository. Users can also ask the prover to reduce an expression and submit a term on the command line. It's essential to note that Lambda Prover uses De Bruijn indices, which means that bound variable names are not preserved.

One aspect to keep in mind is that the --reduce function returns a fixed point of the reduction pipeline and not necessarily a normal form. If prover can't find a reduced form, it will communicate that information. The tool also has a couple of knobs for more complicated cases, such as the number of iterations configured with --fuel and --size-limit for the --equal mode, which instructs the tool to ignore large terms.

While Lambda Prover may have been created to solve a specific problem, this tool has various applications and is suitable for anyone who needs to prove equalities in untyped lambda calculus. Whether it's reducing terms or working through proofs, Lambda Prover is an excellent assistant for anyone working within the mathematical framework of lambda calculus.